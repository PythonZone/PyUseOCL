RelationModel:
    megamodelPart = MegamodelPart
    declarations *= Declaration
;

Declaration:
    RelationDeclaration
;

RelationDeclaration:
    'relation' ? name=ID (signature=Signature) ?
    (o_
        body = BlockBasedBody
    _o)?
    X
;

BlockBasedBody:
    (
        textBlock=TextBlock ?
        columnsBlock=ColumnsBlock ?
        constraintsBlock=ConstraintsBlock ?
        transformationsBlock=TransformationsBlock ?
        propertiesBlock=PropertiesBlock ?
        entity *= Entity
    ) #
;

UniLevelBody:
    (
        textBlock=TextBlock ?
        entity *= Entity
    ) #
;

Signature:
    '('
    columns *= ColumnSpec [',']
    ')'
;


Entity:
    Column
  | Constraint
  | Property
;

//-------------------------------------------------------------------------
// Columns
//-------------------------------------------------------------------------

ColumnsBlock:
    'columns'
    (o_
        columns *= Column
    _o)?
    X
;

Column:
    spec=ColumnSpec
    (o_
        textBlock=TextBlock
    _o)?
    X
;

ColumnSpec:
    key ?= '_'
    foreignKey ?='#'
    name=/[A-Za-z][A-Za-z0-9_]*/
    (':' typeSpecification=TypeSpecification) ?
;

TypeSpecification:
    domain=DomainSpecification
    isOptional ?= '?'
;

DomainSpecification:
        name = ID
    | '{' integers += INT [','] '}'
    | '{' strings += STRING [','] '}'
    | '{' reals += FLOAT [','] '}'
;


//-------------------------------------------------------------------------
// Constraints
//-------------------------------------------------------------------------

ConstraintsBlock:
    'constraints'
    (o_
        constraints *= Constraint
    _o)?
    X
;


Constraint:
      KeyConstraint
    | DependencyConstraint
    | DomainConstraint
    | ForeignKeyConstraint
;

KeyConstraint:
    'key'
    names += ID [',']
    X
;

DependencyConstraint:
    sources += ID [',']
    kind=DependencyKind
    targets += ID [',']
    X
;

DependencyKind:
      label='->'
    | label='-/>'
    | label='-ffd>'
    | label='-/ffd>'
;

DomainConstraint:
    domains *= Domain ['=']
    '='
    typeSpecification=TypeSpecification
    X
;

Domain:
    'dom' '(' name=ID ')'
;


ForeignKeyConstraint:
    sourceProjection=Projection
    operator=Operator
    targetProjection=Projection
    X
;

Projection:
    relationName=ID
    '['
    attributeNames *= ID [',']
    ']'
;

Operator:
      '<='
    | '='
    | '<'
;



//-------------------------------------------------------------------------
// Properties
//-------------------------------------------------------------------------

PropertiesBlock:
    'properties'
    (o_
        properties *= Property
    _o)?
    X
;

Property:
      property = PrimeProperty
    | property = ClosureProperty
    | property = FormProperty
    | property = DependencyConstraint
;

PrimeProperty:
    non ?= '/' 'prime' name=ID
    X
;

ClosureProperty:
    '{'
    lhs +=ID [',']
    '}' '+'
    '='
    '{'
    rhs +=ID [',']
    '}'
    X
;

FormProperty:
    FormId
    X
;

FormId:
      '1NF'
    | '2NF'
    | '3NF'
    | 'BCNF'
    | '4NF'

;




//-------------------------------------------------------------------------
// Transformations
//-------------------------------------------------------------------------

TransformationsBlock:
    'transformation'
    (o_
        textBlock=TextBlock ?
        rules *= Rule
        conceptsBlock=ConceptsBlock ?
    _o)?
    X
;

Rule:
    'rule' name=ID X
;

ConceptsBlock:
    'concepts'
    (o_
        concepts *= Concept
    _o)?
    X
;

Concept:
    name=ID ('.' subname=ID) ?
    X
;

