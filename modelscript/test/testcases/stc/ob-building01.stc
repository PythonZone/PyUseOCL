USE version 4.1.1, Copyright (C) 1999-2015 University of Bremen
ob-building01.driver.soil> open '/D2/ScribesZone/ModelScript/test/modelscript/testcases/obs/.mdl/tmp/ob-building01.soil'
ob-building01.soil> ! lesLilas := new Residence('lesLilas')
ob-building01.soil> ! lesLilas.name := 'Les lilas'
ob-building01.soil> ! lesLilas.description := 'A very confortable yet affordable 2 star residence'
ob-building01.soil> ! lesLilas.floorMin := 0
ob-building01.soil> ! lesLilas.floorMax := 3
ob-building01.soil> ! lesLilas.category := Category.standard
<input>:1:0: Variable `Category' in expression `Category.standard' is undefined.
ob-building01.soil> ! lesLilas.maxNbOfFreeUnits := 0
ob-building01.soil> ! lesLilas.avgRate := 0.0
ob-building01.soil> check -a -v -d
checking structure...
checked structure in 0ms.
checking invariants...
checking invariant (1) `Bathroom::deriveIsOnTheLanding1': OK.
checking invariant (2) `Residence::allPrestigeBathrooms1': OK.
checking invariant (3) `Residence::deriveAvgRate1': FAILED.
  -> false : Boolean
Results of subexpressions:
  Residence.allInstances : Set(Residence) = Set{lesLilas}
  self : Residence = lesLilas
  self.avgRate : Real = 0.0
  self : Residence = lesLilas
  self.rooms : Set(Room) = Set{}
  self.rooms->selectByType(Bedroom) : Set(Bedroom) = Set{}
  self.rooms->selectByType(Bedroom)->collect($e : Bedroom | $e.tenant) : Bag(Tenant) = Bag{}
  self.rooms->selectByType(Bedroom)->collect($e : Bedroom | $e.tenant)->collect($e : Tenant | $e.paidRate) : Bag(Real) = Bag{}
  self.rooms->selectByType(Bedroom)->collect($e : Bedroom | $e.tenant)->collect($e : Tenant | $e.paidRate)->asSet : Set(Real) = Set{}
  self.rooms->selectByType(Bedroom)->collect($e : Bedroom | $e.tenant)->collect($e : Tenant | $e.paidRate)->asSet->sum : Real = 0.0
  self : Residence = lesLilas
  self.rooms : Set(Room) = Set{}
  self.rooms->selectByType(Bedroom) : Set(Bedroom) = Set{}
  self.rooms->selectByType(Bedroom)->collect($e : Bedroom | $e.occupants) : Bag(Resident) = Bag{}
  self.rooms->selectByType(Bedroom)->collect($e : Bedroom | $e.occupants)->select($elem0 : Resident | $elem0.tutors->isEmpty) : Bag(Resident) = Bag{}
  self.rooms->selectByType(Bedroom)->collect($e : Bedroom | $e.occupants)->select($elem0 : Resident | $elem0.tutors->isEmpty)->size : Integer = 0
  (self.rooms->selectByType(Bedroom)->collect($e : Bedroom | $e.tenant)->collect($e : Tenant | $e.paidRate)->asSet->sum / self.rooms->selectByType(Bedroom)->collect($e : Bedroom | $e.occupants)->select($elem0 : Resident | $elem0.tutors->isEmpty)->size) : OclVoid = Undefined
  (self.avgRate = (self.rooms->selectByType(Bedroom)->collect($e : Bedroom | $e.tenant)->collect($e : Tenant | $e.paidRate)->asSet->sum / self.rooms->selectByType(Bedroom)->collect($e : Bedroom | $e.occupants)->select($elem0 : Resident | $elem0.tutors->isEmpty)->size)) : Boolean = false
  Residence.allInstances->forAll(self : Residence | (self.avgRate = (self.rooms->selectByType(Bedroom)->collect($e : Bedroom | $e.tenant)->collect($e : Tenant | $e.paidRate)->asSet->sum / self.rooms->selectByType(Bedroom)->collect($e : Bedroom | $e.occupants)->select($elem0 : Resident | $elem0.tutors->isEmpty)->size))) : Boolean = false
Instances of Residence violating the invariant:
  -> Set{lesLilas} : Set(Residence)
checking invariant (4) `Residence::deriveMaxNbOfFreeUnits1': OK.
checking invariant (5) `Residence::floorOrder1': OK.
checking invariant (6) `Residence::uniqueNumberApartForPrivateBathroom1': OK.
checking invariant (7) `Room::deriveFloor1': OK.
checking invariant (8) `Room::floorBetweenMinAndMax1': OK.
checked 8 invariants in 0.011s, 1 failure.
ob-building01.soil> 
ob-building01.driver.soil> quit
