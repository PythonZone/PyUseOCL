ScenarioModel:
    megamodelPart = MegamodelPart
    descriptors *= DescriptorDeclaration
    actorPart = ActorInstanceDeclarationBlock ?
    ContextDeclarationBlock ?
    ActionDeclarationBlock ?
;

DescriptorDeclaration:
    name=ID (o_
        (textBlock = TextBlock)
    _o)
    X
;

ActorInstanceDeclarationBlock:
    'actor' 'instances' (o_
        actorInstanceDeclarations *= ActorInstanceDeclaration
    _o) ?
    X
;

ActorInstanceDeclaration:
    actorInstanceName = ID
    ':'
    actorName = ID
    X
;

ContextDeclarationBlock:
    'context' (o_
        OBBody
    _o)
    X
;


ActionDeclarationBlock:
    'start' X
    actionDeclarations *= ActionDeclaration
    'stop' X
;

ActionDeclaration:
      ATextBlockActionDeclaration
    | UsecaseActionDeclaration
    | ObjectActionDeclaration
    | SlotActionDeclaration
    | LinkActionDeclaration
    //  TODO: LinkObjectDeclaration
    | CheckDeclaration
;

ATextBlockActionDeclaration:
    textBlock=TextBlock
    (o_
        // To simplify the grammar the rule is fully recursive
        // Inappropriate nest check are permformed by parser
        declarations *= ActionDeclaration
    _o) ? // Optional does not seems to work
          // Currently a text block have to be followed by some action.

    X
;

UsecaseActionDeclaration:
    actorInstanceName = ID
    ('do'|'va')
    usecaseName = ID (o_
        // To simplify the grammar the rule is fully recursive
        // Inappropriate nest check are permformed by parser
        actionDeclarations *= ActionDeclaration
    _o)
    X
;

ObjectActionDeclaration:
    verb=CreateOrDelete ObjectDeclaration
;

SlotActionDeclaration:
    verb=SetOrUpdate SlotDeclaration
;

LinkActionDeclaration:
    verb=CreateOrDelete LinkDeclaration
;

CheckDeclaration:
    'check'
    X
;

CreateOrDelete:
      'create'
    | 'delete'
;

SetOrUpdate:
      'set'
    | 'update'
;