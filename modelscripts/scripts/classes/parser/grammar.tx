ClassModel:
    megamodelPart = MegamodelPart
    declarations *= Declaration
;

Declaration:
      EntitydDeclaration
    | SpeechDeclaration
;


//====================================================================
//                        Symbolic syntax
//====================================================================

EntitydDeclaration:
      Package
    | DataType
    | Enumeration
    | Class
    | Association  // also composition, associationClass
    | Invariant
;

Package:
    'package' names *= ID ['.']
    metaPart = MetaPart ?
    X
;

//==================================================================
//       Types
//==================================================================


DataType:
    'datatype' name=ID
    ('<' superDataType = ID)?   // Not used yet
    metaPart = MetaPart ?
    (o_
        (textBlock = TextBlock)
    _o) ?
    X
;

Enumeration:
    'enumeration' name=ID
    metaPart = MetaPart ?
    o_
        (textBlock = TextBlock) ?
        literals += EnumerationLiteral
    _o
    X
;

EnumerationLiteral:
    name=ID
    metaPart = MetaPart ?

        (o_
            textBlock=TextBlock
        _o)?
    X
;


//==================================================================
//       Classes
//==================================================================


Class:  // common
    (isAbstract ?= 'abstract')
    'class' name=ID
    ('<' (superclasses += ID [','])) ?
    metaPart = MetaPart ?
    (o_
        (textBlock = TextBlock)?
        attributeCompartment=AttributesCompartment ?
        operationCompartment=OperationsCompartment ?
        invariantCompartment=InvariantsCompartment ?
        permissionCompartment=PermissionsCompartment ?
    _o)?
    X
;

AttributesCompartment:  // common, also use for association class
    'attributes'
    (o_
        attributes *= Attribute
    _o)?
    X
;

Attribute:
    decorations = AttributeDecorations
    name=ID ':' type=ID
    // to simplify (cardinality=Cardinality) ?
    ( isOptional = '[' '0' '..' '1' ']' ) ?
    metaPart = MetaPart ?
    (o_
        textBlock=TextBlock
    _o)?
    X
;

AttributeDecorations:
    (
        (isDerived = '/') ?
        (visibility = Visibility) ?
    ) #
;

OperationsCompartment:
    'operations'
    (o_
        operations *= Operation
    _o)?
    X
;

Operation:
    name=ID
    '('
        arguments*=Argument[',']
    ')'
    (':' returnType=ID)?
    metaPart = MetaPart ?

    (o_
        textBlock=TextBlock
    _o)?
    X

;

Arguments:
    arguments *= Argument[',']
;


Argument:
    name=ID ':' type=ID
;

InvariantsCompartment:
    'invariants'
    X
;

PermissionsCompartment:
    'permissions'
    X
;


//==================================================================
//       Associations
//==================================================================


Association:
    (isAbstract ?= 'abstract')
    kind=AssociationKind name=ID
    ('<' (superclasses += ID [','])) ?
    metaPart = MetaPart ?
    o_
        (textBlock=TextBlock) ?
        roleCompartment=RoleCompartment
        attributeCompartment=AttributesCompartment ?
        operationCompartment=OperationsCompartment ?
    _o
    X
;

AssociationKind:
      'association' 'class'  //===== MUST BE FIRST =======
    | 'association'
    | 'composition'
    | 'aggregation'
;

RoleCompartment:
    'roles' o_
        source=Role
        target=Role
    _o
    X
;

Role:
    (navigability = Navigability )?
    name=ID ':' type=ID cardinality=Cardinality
    (o_
        textBlock=TextBlock
    _o)?
    metaPart = MetaPart
    X
;

Navigability:
      'x'
    | '>'
;

Cardinality:
   '[' min=Multiplicity ? ('..' max=Multiplicity) ? ']'
;

Multiplicity:
    INT | '*'
;


//----------------------------------------------------------


Visibility:
      '-'
    | '+'
    | '%'
    | '~'
;

MetaPart:
    ('<<' stereotypes += ID [','] '>>') ?
    ('{' tags += ID [','] '}') ?
;




//==================================================================
//       Invariants
//==================================================================

Invariant:
    'invariant' name=ID
    (o_
        (textBlock=TextBlock) ?
        (scope = Scope) ?
        oclInvariant = OCLInvariant ?
    _o) ?
    X
;

Scope:
    'scope' (':' ID*)?
    (o_
        ScopeLine *
    _o)
    X
;

ScopeLine:
    ID
    X

;

OCLInvariant:
    'ocl' //'context' 'self' ':' class=ID
    (o_
        OCLLine*
    _o)*
    X
;

OCLLine:
    /[^\000]*/
    (o_
        OCLLine*
    _o)*
    X
;

/*
OCLLine[noskipws]:
    line=/(.*)/ X
;
*/



//====================================================================
//                        Speech syntax
//====================================================================

SpeechDeclaration:
      SpeechClassDeclaration
    | SpeechInheritance
    | SpeechAttributeDeclaration
    | SpeechAssocForwardDeclaration
    | SpeechAssocConstraint
;


SpeechClassDeclaration:
      FRClassDeclaration
    | ENClassDeclaration
;

FRClassDeclaration:
    'Le' 'concept' 'de' class=ID  'est' 'important' '.'
    X
;

ENClassDeclaration:
    'The' 'concept' 'of' class=ID 'is' 'important' '.'
    X
;

SpeechInheritance:
      FRClassInheritance
    | ENClassInheritance
;

FRClassInheritance:
    Un_ class=ID 'est' un_ superclass=ID '.'
    X
;

ENClassInheritance:
    A_ class=ID 'is' a_ superclass=ID '.'
    X
;

SpeechAttributeDeclaration:
      FRAttributeDeclaration
    | ENAttributeDeclaration
;

FRAttributeDeclaration:
    Le_ attribute=ID d_un_ class=ID 'est' un_ type=ID '.' X
;

ENAttributeDeclaration:
    'The' attribute=ID 'of' a_ class=ID 'is' a_ type=ID '.' X
;

SpeechAssocForwardDeclaration:
      ENAssocForwardDeclaration
    | FRAssocForwardDeclaration
;

ENAssocForwardDeclaration:
    A_ class1=ID
    association=ID
    'of'? cardinality=SpeechAssocCardinality
    role2=ID
    'of'? 'type' class2=ID
    '.'
    X
;

FRAssocForwardDeclaration:
    Un_ class1=ID
    association=ID
    de_? cardinality=SpeechAssocCardinality
    role2=ID
    de_? 'type' class2=ID
    '.'
    X
;


SpeechAssocReverseDeclaration:
      ENAssocReverseDeclaration
    | FRAssocReverseDeclaration
;

ENAssocReverseDeclaration:
    A_ class2=ID
    'has' cardinality=SpeechAssocCardinality
    role1=ID
    'of' 'type' class1=ID
    '.'
    X
;

FRAssocReverseDeclaration:
    Un_ class2=ID
    'a' cardinality=SpeechAssocCardinality
    role1=ID
    'de' 'type' class1=ID
    '.'
    X
;

SpeechAssocCardinality:
      SpeechAssocCardinality_0N
    | SpeechAssocCardinality_1N
    | SpeechAssocCardinality_01
    | SpeechAssocCardinality_1
    | SpeechAssocCardinality_XY
;

SpeechAssocCardinality_0N:
      ('zero' 'or' 'many')
    | ('zero' 'ou' 'plusieurs')
;

SpeechAssocCardinality_1N:
      ('one' 'or' 'many')
    | (('un'|'une') 'ou' 'plusieurs')
;

SpeechAssocCardinality_01:
      ('zero' 'or' 'one')
    | ('zero' 'ou' un_)
;

SpeechAssocCardinality_1:
      'one'
    | un_
;

SpeechAssocCardinality_XY:
      ('between' min=INT 'and' max=INT)
    | ('entre' min=INT 'et' max=INT)
;


SpeechAssocConstraint:
      ENAssocConstraint
    | FRAssocConstraint
;

ENAssocConstraint:
    'If' var2a=ID
    'is' card2=ENAssocConstraintCardinality
    role2=ID
    'of' 'a' class1=ID
    var1a=ID
    o_
        'then' var1b=ID
        'is' card1=ENAssocConstraintCardinality
        role1=ID
        'of' ( 'the' class2=ID )
        var2b=ID
        '.'
        X
    _o
    X
;

ENAssocConstraintCardinality:
      'the'
    | 'one' 'of' 'the'
;

FRAssocConstraint:
    'Si' var2a=ID
    'est' card2=FRAssocConstraintCardinality
    role2=ID
    d_un_ class1=ID
    var1a=ID
    o_
        'alors' var1b=ID
        'est' card1=FRAssocConstraintCardinality
        role1=ID
        (     (du_ class2=ID var2b=ID)
            | ('de' var2b=ID)
            )
        '.'
        X
    _o
    X
;


FRAssocConstraintCardinality:
      le_
    | "l'" un_ 'des'
;

