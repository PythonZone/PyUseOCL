
//------------------------------------------------------------------
//                              Story
//------------------------------------------------------------------

Story:
    steps *= Step
;

//............................ Steps .........................

Step:
        ATextBlockStep
      | OperationStep
      | VerbStep
;

//............. Annotated text block steps ...................


ATextBlockStep:
    textBlock = TextBlock
    (o_
        steps *= Step
    _o) ?
    // FIXME: ? not working => impossible to have empty block
    X
;


//...................... Verb steps ...........................

VerbStep:
    ('now'|'maintenant')
    actorInstanceName = ID
    'va' ?
    verb = ID
    (o_
        steps *= Step
    _o) ?
    X
;


//...................... Operation steps ...........................

OperationStep:
      UpdateStep
    | ConsultStep
;

UpdateStep:
    // ORDER IS IMPORTANT
      LinkOperationStep         // create | delete
    | SlotStep                  // set | update
    | ObjectCreationStep
    | ObjectDeletionStep
    // TODO: LinkObject
;

ConsultStep:
      CheckStep
    | ReadStep
;

//...................... Consult steps ...........................

CheckStep:
    action = 'check'
    parameters ?= 'something'      // TODO: define Check syntax
    X
;

ReadStep:
    action = 'read'
    parameters ?= 'something'       // TODO: define READ syntax
    X
;

//...................... Update steps ............................

ObjectCreationStep:
    (action = 'create')?
    objectDeclaration = ObjectDeclaration
;

ObjectDeletionStep:
    (action = 'delete')?
    name = ID
;

SlotStep:
    (action = SetOrUpdate)?
    slotDeclaration = SlotDeclaration
;

LinkOperationStep:
    (action = CreateOrDelete)?
    linkDeclaration = LinkDeclaration
;

CreateOrDelete:
      'create'
    | 'delete'
;

SetOrUpdate:
      'set'
    | 'update'
;

//...................... Object declaration ........................

ObjectDeclaration:
      SpeechObjectDeclaration
    | SymbolicObjectDeclaration
;


SpeechObjectDeclaration:
    name = ID
    ('est'|'is')
    ('une'|'un'|'an'|'a')  // order is important
    type = ID
    '.'
    (o_
        (textBlock = TextBlock)
    _o) ?
    X
;

SymbolicObjectDeclaration:
    name = ID
    ':'
    type = ID
    (o_
        (textBlock = TextBlock)
    _o) ?
    X
;


//....................... Slot declaration ........................


SlotDeclaration:
      SpeechSlotDeclaration
    | SymbolicSlotDeclaration
;

SpeechSlotDeclaration:
    DefiniteArticle ?
    attribute = ID
    ('of'|'de')
    object = ID
    ('is'|'est')
    value = BASETYPE
    (o_
        (textBlock = TextBlock)
    _o) ?
    '.'
    X
;


SymbolicSlotDeclaration:
    object = ID
    '.'
    attribute = ID
    '='
    value = BASETYPE
    (o_
        (textBlock = TextBlock)
    _o) ?
    X
;

//....................... Link declaration ........................


LinkDeclaration:
      SpeechLinkDeclaration
    | SymbolicLinkDeclaration
;

SpeechLinkDeclaration:
    source = ID
    association = ID
    target = ID
    '.'
    (o_
        (textBlock = TextBlock)
    _o) ?
    X
;

SymbolicLinkDeclaration:
    '('
    source = ID
    ','
    association = ID
    ','
    target = ID
    ')'
    (o_
        (textBlock = TextBlock)
    _o) ?
    X
;


//................... Link object declaration .....................



    // TODO: LinkObjectDeclaration







/*
OBBody:
    declarations *= OBDeclaration
;

OBDeclaration:
      CoreOBDeclaration
    | ATextBlockOBDeclaration
;

CoreOBDeclaration:
      ObjectDeclaration
    | SlotDeclaration
    | LinkDeclaration
    // LinkObjectDeclaration
;

ATextBlockOBDeclaration:
    textBlock=TextBlock
    (o_
        declarations *= CoreOBDeclaration
    _o) ?
    X ?
;
*/


